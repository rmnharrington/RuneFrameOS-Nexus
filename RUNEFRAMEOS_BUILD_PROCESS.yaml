# RuneFrameOS Application Build & Update Process
# Comprehensive guide for building, updating, and maintaining RuneFrameOS applications

version: "1.0.0"
last_updated: "2024-12-19"
author: "Bad Guy Gas LLC"
status: "Active Development"

## Overview
This document outlines the standardized process for building, updating, and maintaining RuneFrameOS applications. All applications follow the same architecture and deployment patterns to ensure consistency and reliability.

## Application Architecture Standards

### Core Framework Requirements
- **Next.js 14**: Modern React framework with App Router
- **React 18**: Latest React features and hooks
- **TypeScript**: Full type safety and development experience
- **Tailwind CSS**: Utility-first CSS framework with custom themes
- **Docker**: Containerized deployment for consistency

### Port Assignment System
```yaml
ports:
  nexus: 3000          # Central hub
  distillara: 3001     # Gaming application
  core: 3002           # Admin dashboard
  feastwell: 3003      # Food management
  hoardwell: 3004      # Inventory management
  tavern: 3005         # Tavern interface
  scriptoria: 3006     # Gaming systems library
  necrotic-arcanum: 3007  # Undead creation
  mercatrix: 3008      # Economy management
  personavault: 3009   # Character management
  travelerstable: 3010 # GM campaign management
```

### Layout Standards (GUI_DESIGN_SPECIFICATION.md Compliance)
```yaml
mandatory_layout:
  left_sidebar: "w-48 lg:w-56 (192px mobile, 224px desktop)"
  right_sidebar: "w-64 (256px) - hidden on mobile/tablet"
  responsive_grid: "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-4"
  no_fixed_positioning: true
  mobile_overlay: "Right sidebar becomes overlay on mobile"
```

## Build Process for New Applications

### 1. Project Setup
```bash
# Create application directory
mkdir RuneFrameOS-[AppName]
cd RuneFrameOS-[AppName]

# Initialize Next.js project
npx create-next-app@latest . --typescript --tailwind --eslint --app --src-dir --import-alias "@/*" --yes
```

### 2. Configuration Files
```yaml
required_files:
  - package.json: "Define dependencies and scripts"
  - tailwind.config.js: "Custom color palette and theme"
  - postcss.config.js: "PostCSS configuration"
  - tsconfig.json: "TypeScript configuration"
  - next.config.js: "Next.js configuration"
  - next-env.d.ts: "Next.js type definitions"
  - Dockerfile: "Docker container definition"
  - README.md: "Comprehensive documentation"
```

### 3. Package.json Configuration
```json
{
  "name": "runeframeos-[appname]",
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev -p [PORT]",
    "build": "next build",
    "start": "next start -p [PORT]",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "14.0.0",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "typescript": "5.0.0",
    "tailwindcss": "3.3.0",
    "autoprefixer": "10.4.0",
    "postcss": "8.4.0"
  }
}
```

### 4. Tailwind Configuration
```yaml
tailwind_requirements:
  custom_colors: "App-specific color palette"
  custom_fonts: "Cinzel (fantasy) and Kalam (handwriting)"
  text_shadows: "Custom text shadow utilities"
  box_shadows: "Custom box shadow utilities"
  responsive_breakpoints: "Follow RuneFrameOS standards"
```

### 5. Component Structure
```yaml
mandatory_components:
  - Header.tsx: "App logo, navigation, user controls"
  - LeftSidebar.tsx: "Main navigation menu"
  - RightSidebar.tsx: "Quick actions and status"
  - AppLayout.tsx: "Main layout wrapper"
  - AppFooter.tsx: "BGG logo and company info"
  - MainDashboard.tsx: "Primary content area"
```

### 6. API Endpoints
```yaml
required_api_endpoints:
  - /api/health: "Service health check"
  - /api/module-info: "Module capabilities"
  - /api/status: "Current status and metrics"
```

## Update Process for Existing Applications

### 1. Code Updates
```bash
# Navigate to application directory
cd RuneFrameOS-[AppName]

# Make code changes
# Edit source files as needed

# Test locally (if applicable)
npm run dev
```

### 2. Docker Rebuild Process
```bash
# Stop the service
docker-compose stop [appname]

# Rebuild with no cache
docker-compose build --no-cache [appname]

# Start the service
docker-compose up -d [appname]

# Verify the service is running
docker-compose ps [appname]
```

### 3. Image Updates (Static Files)
```bash
# When images are updated in public/ folder
# Rebuild container to pick up new static files
docker-compose build --no-cache [appname]
docker-compose restart [appname]
```

### 4. Dependency Updates
```bash
# Navigate to application directory
cd RuneFrameOS-[AppName]

# Install new dependencies
npm install [package-name]

# Update package-lock.json
npm install

# Rebuild Docker container
docker-compose build --no-cache [appname]
docker-compose restart [appname]
```

## Deployment Commands

### Docker Compose Operations
```bash
# Start entire ecosystem
docker-compose up -d

# Start specific service
docker-compose up -d [servicename]

# Stop specific service
docker-compose stop [servicename]

# Restart specific service
docker-compose restart [servicename]

# View service logs
docker-compose logs -f [servicename]

# View all services status
docker-compose ps

# Build specific service
docker-compose build --no-cache [servicename]
```

### Service Management
```bash
# Check if service is accessible
Invoke-WebRequest -Uri "http://localhost:[PORT]" -UseBasicParsing

# Check API endpoints
Invoke-WebRequest -Uri "http://localhost:[PORT]/api/health" -UseBasicParsing
```

## Troubleshooting Common Issues

### 1. Port Conflicts
```yaml
issue: "Port [X] is already in use"
solution:
  - "Check docker-compose ps for conflicting containers"
  - "Use docker rm [container_name] to remove conflicts"
  - "Ensure port assignments are unique in docker-compose.yml"
```

### 2. Build Failures
```yaml
issue: "Docker build fails"
solution:
  - "Check for missing dependencies in package.json"
  - "Verify all required files exist"
  - "Use docker-compose build --no-cache for clean builds"
  - "Check Docker logs for specific error messages"
```

### 3. Service Not Starting
```yaml
issue: "Service fails to start"
solution:
  - "Check docker-compose logs [servicename]"
  - "Verify environment variables are correct"
  - "Ensure working directory and commands are properly set"
  - "Check for permission issues in Dockerfile"
```

### 4. Static File Updates Not Visible
```yaml
issue: "Updated images/files not showing"
solution:
  - "Rebuild container: docker-compose build --no-cache [appname]"
  - "Restart service: docker-compose restart [appname]"
  - "Verify files are in correct public/ directory"
```

## Quality Assurance Checklist

### Before Deployment
- [ ] All required components are implemented
- [ ] API endpoints are functional
- [ ] Responsive design follows mandatory grid pattern
- [ ] Color scheme matches app theme
- [ ] Header and footer follow GUI specifications
- [ ] Sidebars have correct dimensions and behavior
- [ ] Mobile responsiveness is tested

### After Deployment
- [ ] Service starts successfully
- [ ] Application is accessible on assigned port
- [ ] API endpoints respond correctly
- [ ] UI renders properly
- [ ] Navigation works as expected
- [ ] Mobile layout functions correctly

## Integration with Nexus Dashboard

### Adding New App Cards
```yaml
location: "RuneFrameOS-Nexus/src/app/page.tsx"
section: "App Testing & Development"
format:
  - "Use <a> tags with href instead of <button> with onClick"
  - "Include target='_blank' and rel='noopener noreferrer'"
  - "Follow established card styling patterns"
  - "Include port number and app description"
```

### Card Template
```tsx
{/* AppName Card */}
<div className="bg-white/80 rounded-lg border border-blue-200 p-4 text-center hover:shadow-md transition-all duration-200">
  <div className="text-3xl mb-2">[EMOJI]</div>
  <h3 className="font-semibold text-blue-800 text-sm mb-1">[AppName]</h3>
  <p className="text-xs text-blue-600 mb-3">[Description]</p>
  <div className="text-xs text-green-600 font-medium mb-2">Port [PORT]</div>
  <a
    href="http://localhost:[PORT]"
    target="_blank"
    rel="noopener noreferrer"
    className="block w-full py-2 px-3 bg-gradient-to-r from-[COLOR1] to-[COLOR2] hover:from-[COLOR1_DARK] hover:to-[COLOR2_DARK] text-white font-semibold rounded-lg transition-all duration-200 hover:scale-105 text-xs text-center no-underline"
  >
    [EMOJI] Open [AppName]
  </a>
</div>
```

## Maintenance and Updates

### Regular Maintenance Tasks
```yaml
weekly:
  - "Check docker-compose ps for all services"
  - "Verify all applications are accessible"
  - "Review error logs for any issues"

monthly:
  - "Update dependencies as needed"
  - "Review and update README files"
  - "Verify GUI specification compliance"
  - "Test responsive design across devices"

quarterly:
  - "Review port assignments and conflicts"
  - "Update docker-compose.yml if needed"
  - "Review and update build process documentation"
```

### Documentation Updates
```yaml
when_to_update:
  - "New features are added"
  - "API endpoints change"
  - "Dependencies are updated"
  - "Port assignments change"
  - "GUI specifications are updated"
```

## Best Practices

### Development
- Always follow GUI_DESIGN_SPECIFICATION.md
- Use consistent naming conventions
- Implement responsive design from the start
- Test on multiple screen sizes
- Follow established color schemes

### Deployment
- Use docker-compose for all deployments
- Always rebuild with --no-cache after significant changes
- Verify services are running after deployment
- Test API endpoints after updates
- Keep deployment logs for troubleshooting

### Maintenance
- Regular health checks of all services
- Monitor for port conflicts
- Keep documentation current
- Test updates in development before production
- Maintain consistent backup procedures

---

## Notes
- This process ensures consistency across all RuneFrameOS applications
- All applications must follow the same architectural patterns
- GUI specifications are mandatory and non-negotiable
- Docker Compose is the only approved deployment method
- Regular testing and verification is essential for reliability

