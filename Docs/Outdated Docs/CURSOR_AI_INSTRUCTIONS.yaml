# ðŸš€ RuneFrameOS Cursor AI Instructions
# This file teaches Cursor AI how to properly set up the development environment
# for other developers working on the RuneFrameOS project

project_overview:
  name: "RuneFrameOS Ecosystem"
  description: "A unified gaming ecosystem with multiple specialized applications integrating through a central Nexus dashboard"
  architecture: "Microservices with Docker containerization"
  tech_stack:
    - "Frontend: Next.js, React, TypeScript, Tailwind CSS"
    - "Backend: Node.js, Express, JWT authentication"
    - "Infrastructure: Docker, Docker Compose"
    - "Database: PostgreSQL (planned)"
    - "Real-time: WebSocket (planned)"

development_environment_setup:
  prerequisites:
    - "Docker Desktop installed and running"
    - "Git configured and repository cloned"
    - "VS Code or Cursor IDE"
    - "Node.js 18+ (for local development)"
    - "PowerShell (Windows) or Bash (macOS/Linux)"

  initial_setup_steps:
    1: "Clone the repository: git clone <repository-url>"
    2: "Navigate to project root: cd Code_Repository"
    3: "Start all services: docker-compose up -d"
    4: "Verify services: docker-compose ps"
    5: "Access Nexus Hub: http://localhost:3000"

  service_ports:
    nexus: 3000
    distillara: 3001
    core: 3002
    feastwell: 3003
    hoardwell: 3004
    tavern: 3005
    scriptoria: 3006
    auth_service: 4001
    core_service: 4002
    user_service: 4003

project_structure:
  root_directory: "Code_Repository/"
  frontend_apps:
    - "RuneFrameOS-Nexus/ (Main dashboard)"
    - "RuneFrameOS-Distillara/ (Alchemy system)"
    - "RuneFrameOS-Feastwell/ (Cooking system)"
    - "RuneFrameOS-Hoardwell/ (Inventory management)"
    - "RuneFrameOS-BrokeUnicornTavern/ (Social hub)"
    - "RuneFrameOS-Scriptoria/ (Gaming systems)"
    - "RuneFrameOS-Core/ (Admin dashboard)"

  backend_services:
    - "RuneFrameOS-SharedServices/auth-service/"
    - "RuneFrameOS-SharedServices/core-service/"
    - "RuneFrameOS-SharedServices/user-service/"

  configuration_files:
    - "docker-compose.yml (Main orchestration)"
    - "SERVER_SETUP_ARCHITECTURE.md (System overview)"
    - "GUI_DESIGN_SPECIFICATION.md (Design standards)"
    - "README.md (Project overview)"

design_standards:
  layout_requirements:
    left_sidebar: "Always w-48 lg:w-56 (192px mobile, 224px desktop)"
    right_sidebar: "Always w-64 (256px, hidden on mobile/tablet)"
    responsive_grids: "Use md:grid-cols-2 pattern for medium screens"
    positioning: "Never use fixed positioning for sidebars"

  color_philosophy:
    principle: "Each application defines its own unique color scheme and theme"
    structural_consistency: "Unified layout, spacing, and component behavior"
    visual_diversity: "Apps maintain unique visual identity through colors"

  responsive_design:
    pattern: "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-4"
    mobile_first: "Design for mobile, enhance for larger screens"
    sidebar_visibility: "Left sidebar always visible, right sidebar hidden on mobile"

development_workflow:
  docker_commands:
    start_all: "docker-compose up -d"
    start_specific: "docker-compose up -d [service-name]"
    rebuild_service: "docker-compose build --no-cache [service-name]"
    view_logs: "docker-compose logs -f [service-name]"
    stop_service: "docker-compose stop [service-name]"
    restart_service: "docker-compose restart [service-name]"

  local_development:
    navigate_to_app: "cd RuneFrameOS-[AppName]"
    install_dependencies: "npm install"
    start_dev_server: "npm run dev"
    build_app: "npm run build"
    run_tests: "npm test"

  hot_reload:
    enabled: true
    volume_mounts: "Source code mounted as volumes for live editing"
    file_changes: "Save files to see changes immediately in browser"

api_integration:
  required_endpoints:
    - "/api/health (Health check)"
    - "/api/module-info (Module information)"
    - "/api/status (Current status)"

  response_format:
    success: |
      {
        "success": true,
        "data": { /* response data */ },
        "message": "Operation completed successfully",
        "timestamp": "ISO timestamp",
        "requestId": "uuid-v4"
      }
    
    error: |
      {
        "success": false,
        "error": {
          "code": "ERROR_CODE",
          "message": "Human readable error message",
          "details": "Additional error details"
        },
        "timestamp": "ISO timestamp",
        "requestId": "uuid-v4"
      }

  authentication:
    type: "JWT Bearer token"
    header: "Authorization: Bearer <JWT_TOKEN>"
    endpoints: "All protected routes require valid token"

testing_requirements:
  before_submitting:
    - "Local testing: Changes work in local ecosystem"
    - "Cross-app testing: Changes don't break other applications"
    - "Responsive testing: Works on mobile, tablet, and desktop"
    - "Integration testing: Module integration still functions"

  testing_checklist:
    - "App starts without errors"
    - "Left sidebar visible and functional"
    - "Right sidebar hidden on mobile/tablet"
    - "Responsive design works correctly"
    - "Module integration functions"
    - "No console errors in browser"
    - "Performance is acceptable"

documentation_files:
  essential_documents:
    - "GETTING_STARTED.md (New developer setup)"
    - "CONTRIBUTING.md (Contribution guidelines)"
    - "DEVELOPMENT_SETUP.md (Development environment)"
    - "API_DOCUMENTATION.md (API reference)"
    - "TROUBLESHOOTING.md (Common issues)"
    - "PROJECT_ROADMAP.md (Project direction)"

  update_requirements:
    - "New features: Update README.md and relevant guides"
    - "API changes: Update API_DOCUMENTATION.md"
    - "Design changes: Update GUI_DESIGN_SPECIFICATION.md"
    - "Architecture changes: Update SERVER_SETUP_ARCHITECTURE.md"

git_workflow:
  branch_naming:
    - "feature/feature-name"
    - "bugfix/bug-description"
    - "docs/documentation-update"
    - "refactor/component-name"

  commit_messages:
    format: "type: description"
    types:
      - "feat: new feature"
      - "fix: bug fix"
      - "docs: documentation update"
      - "refactor: code refactoring"
      - "style: formatting changes"

  pull_request_process:
    1: "Create feature branch from main"
    2: "Make changes following code standards"
    3: "Test locally in ecosystem"
    4: "Commit with clear messages"
    5: "Push branch and create PR"
    6: "Address review feedback"
    7: "Merge after approval"

troubleshooting_guide:
  common_issues:
    docker_service_wont_start:
      - "Check port conflicts: netstat -an | findstr :3000"
      - "Check service logs: docker-compose logs [service-name]"
      - "Restart Docker Desktop if needed"
    
    hot_reload_not_working:
      - "Check volume mounts: docker-compose exec [service] ls -la /app"
      - "Restart service: docker-compose restart [service-name]"
      - "Fix permissions: docker-compose exec [service] chown -R node:node /app"
    
    module_integration_issues:
      - "Verify API endpoints: curl http://localhost:[port]/api/health"
      - "Check browser console for errors"
      - "Verify module is running: docker-compose ps"

  emergency_fixes:
    nuclear_option: "docker-compose down && docker system prune -a -f && docker-compose up -d"
    restart_docker: "Restart Docker Desktop completely, then restart services"

performance_optimization:
  docker_optimization:
    - "Use BuildKit: export DOCKER_BUILDKIT=1"
    - "Multi-stage builds in Dockerfiles"
    - "Proper .dockerignore files"
    - "Resource limits in docker-compose.yml"

  node_optimization:
    - "Memory limits: NODE_OPTIONS='--max-old-space-size=1024'"
    - "Build optimization: npm ci --only=production"
    - "Bundle analysis: @next/bundle-analyzer"

security_considerations:
  development_security:
    - "Never commit .env files"
    - "Use environment variables for secrets"
    - "Validate all inputs"
    - "Implement proper CORS policies"
    - "Use HTTPS in production"

  api_security:
    - "JWT token validation"
    - "Rate limiting implementation"
    - "Input sanitization"
    - "SQL injection protection"
    - "XSS prevention"

monitoring_and_debugging:
  tools:
    - "Docker stats: docker stats"
    - "Service logs: docker-compose logs -f"
    - "Health checks: curl health endpoints"
    - "Browser DevTools: React Developer Tools, Network tab"
    - "VS Code debugging: launch.json configuration"

  metrics_to_track:
    - "Service response times"
    - "Memory and CPU usage"
    - "Error rates"
    - "API call volumes"
    - "User engagement metrics"

next_steps_for_developers:
  immediate_actions:
    1: "Read GETTING_STARTED.md for basic setup"
    2: "Start ecosystem with docker-compose up -d"
    3: "Explore Nexus Hub at http://localhost:3000"
    4: "Read CONTRIBUTING.md for development standards"
    5: "Set up development environment per DEVELOPMENT_SETUP.md"

  learning_path:
    1: "Understand project architecture (SERVER_SETUP_ARCHITECTURE.md)"
    2: "Learn design standards (GUI_DESIGN_SPECIFICATION.md)"
    3: "Study API structure (API_DOCUMENTATION.md)"
    4: "Practice with troubleshooting (TROUBLESHOOTING.md)"
    5: "Contribute following guidelines (CONTRIBUTING.md)"

  project_goals:
    - "Build a unified gaming ecosystem"
    - "Maintain structural consistency across apps"
    - "Enable visual diversity and unique theming"
    - "Create seamless module integration"
    - "Support responsive design on all devices"

# ðŸŽ¯ Key Principles for Cursor AI
# When helping developers with this project:

# 1. ALWAYS check the documentation first
# 2. Follow the design standards strictly (sidebar widths, responsive patterns)
# 3. Use Docker commands for service management
# 4. Test changes in the local ecosystem before suggesting
# 5. Maintain structural consistency while allowing visual diversity
# 6. Reference the appropriate documentation files for guidance
# 7. Ensure responsive design works on all screen sizes
# 8. Verify module integration still functions after changes
# 9. Use the established git workflow and commit message format
# 10. Prioritize user experience and system stability

# This file should be updated whenever the project structure or standards change
# Last Updated: Current Development Session
# Status: Complete Cursor AI instructions for RuneFrameOS development
